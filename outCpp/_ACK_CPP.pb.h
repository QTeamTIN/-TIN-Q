// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: _ACK_CPP.proto

#ifndef PROTOBUF__5fACK_5fCPP_2eproto__INCLUDED
#define PROTOBUF__5fACK_5fCPP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf__5fACK_5fCPP_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaults_ACKImpl();
void InitDefaults_ACK();
inline void InitDefaults() {
  InitDefaults_ACK();
}
}  // namespace protobuf__5fACK_5fCPP_2eproto
namespace packet {
class _ACK;
class _ACKDefaultTypeInternal;
extern _ACKDefaultTypeInternal __ACK_default_instance_;
}  // namespace packet
namespace packet {

// ===================================================================

class _ACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet._ACK) */ {
 public:
  _ACK();
  virtual ~_ACK();

  _ACK(const _ACK& from);

  inline _ACK& operator=(const _ACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _ACK(_ACK&& from) noexcept
    : _ACK() {
    *this = ::std::move(from);
  }

  inline _ACK& operator=(_ACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const _ACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _ACK* internal_default_instance() {
    return reinterpret_cast<const _ACK*>(
               &__ACK_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(_ACK* other);
  friend void swap(_ACK& a, _ACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _ACK* New() const PROTOBUF_FINAL { return New(NULL); }

  _ACK* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const _ACK& from);
  void MergeFrom(const _ACK& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(_ACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string success = 3;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  const ::std::string& success() const;
  void set_success(const ::std::string& value);
  #if LANG_CXX11
  void set_success(::std::string&& value);
  #endif
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  ::std::string* mutable_success();
  ::std::string* release_success();
  void set_allocated_success(::std::string* success);

  // optional string error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // required int32 operational_local_id = 2;
  bool has_operational_local_id() const;
  void clear_operational_local_id();
  static const int kOperationalLocalIdFieldNumber = 2;
  ::google::protobuf::int32 operational_local_id() const;
  void set_operational_local_id(::google::protobuf::int32 value);

  // required int32 code = 1 [default = 4];
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet._ACK)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_operational_local_id();
  void clear_has_operational_local_id();
  void set_has_success();
  void clear_has_success();
  void set_has_error();
  void clear_has_error();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr success_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 operational_local_id_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf__5fACK_5fCPP_2eproto::TableStruct;
  friend void ::protobuf__5fACK_5fCPP_2eproto::InitDefaults_ACKImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// _ACK

// required int32 code = 1 [default = 4];
inline bool _ACK::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _ACK::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _ACK::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _ACK::clear_code() {
  code_ = 4;
  clear_has_code();
}
inline ::google::protobuf::int32 _ACK::code() const {
  // @@protoc_insertion_point(field_get:packet._ACK.code)
  return code_;
}
inline void _ACK::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:packet._ACK.code)
}

// required int32 operational_local_id = 2;
inline bool _ACK::has_operational_local_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _ACK::set_has_operational_local_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _ACK::clear_has_operational_local_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _ACK::clear_operational_local_id() {
  operational_local_id_ = 0;
  clear_has_operational_local_id();
}
inline ::google::protobuf::int32 _ACK::operational_local_id() const {
  // @@protoc_insertion_point(field_get:packet._ACK.operational_local_id)
  return operational_local_id_;
}
inline void _ACK::set_operational_local_id(::google::protobuf::int32 value) {
  set_has_operational_local_id();
  operational_local_id_ = value;
  // @@protoc_insertion_point(field_set:packet._ACK.operational_local_id)
}

// optional string success = 3;
inline bool _ACK::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _ACK::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _ACK::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _ACK::clear_success() {
  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_success();
}
inline const ::std::string& _ACK::success() const {
  // @@protoc_insertion_point(field_get:packet._ACK.success)
  return success_.GetNoArena();
}
inline void _ACK::set_success(const ::std::string& value) {
  set_has_success();
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet._ACK.success)
}
#if LANG_CXX11
inline void _ACK::set_success(::std::string&& value) {
  set_has_success();
  success_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet._ACK.success)
}
#endif
inline void _ACK::set_success(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_success();
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet._ACK.success)
}
inline void _ACK::set_success(const char* value, size_t size) {
  set_has_success();
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet._ACK.success)
}
inline ::std::string* _ACK::mutable_success() {
  set_has_success();
  // @@protoc_insertion_point(field_mutable:packet._ACK.success)
  return success_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _ACK::release_success() {
  // @@protoc_insertion_point(field_release:packet._ACK.success)
  clear_has_success();
  return success_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _ACK::set_allocated_success(::std::string* success) {
  if (success != NULL) {
    set_has_success();
  } else {
    clear_has_success();
  }
  success_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), success);
  // @@protoc_insertion_point(field_set_allocated:packet._ACK.success)
}

// optional string error = 4;
inline bool _ACK::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _ACK::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _ACK::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _ACK::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& _ACK::error() const {
  // @@protoc_insertion_point(field_get:packet._ACK.error)
  return error_.GetNoArena();
}
inline void _ACK::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet._ACK.error)
}
#if LANG_CXX11
inline void _ACK::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet._ACK.error)
}
#endif
inline void _ACK::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet._ACK.error)
}
inline void _ACK::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet._ACK.error)
}
inline ::std::string* _ACK::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:packet._ACK.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _ACK::release_error() {
  // @@protoc_insertion_point(field_release:packet._ACK.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _ACK::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:packet._ACK.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF__5fACK_5fCPP_2eproto__INCLUDED
